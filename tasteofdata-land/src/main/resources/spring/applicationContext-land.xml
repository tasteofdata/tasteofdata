<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/tx   
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
      http://www.springframework.org/schema/aop  
      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	
	<context:component-scan base-package="com.tasteofdata.land">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!--mybatis 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="basePackage" value="com.tasteofdata.land.module" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- jdbcTemplate配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
	
	<!-- 动态数据源拦截器 -->
	<bean id="dataSourceInterceptor" class="com.tasteofdata.sys.core.db.interceptor.DataSourceInterceptor">
		<property name="attributes">
			<props>
				<prop key="query*">read</prop>
				<prop key="is*">read</prop>
				<prop key="find*">read</prop>
				<prop key="get*">read</prop>
				<prop key="load*">read</prop>
				<prop key="count*">read</prop>
				<prop key="list*">read</prop>
				<prop key="check*">read</prop>
				<prop key="save*">write</prop>
				<prop key="create*">write</prop>
				<prop key="add*">write</prop>
				<prop key="del*">write</prop>
				<prop key="remove*">write</prop>
				<prop key="upd*">write</prop>
				<prop key="process*">write</prop>
				<prop key="edit*">write</prop>
				<prop key="reset*">write</prop>
				<prop key="generate*">write</prop>
				<prop key="credit*">write</prop>
				<prop key="debit*">write</prop>
				<prop key="send*">write</prop>
				<prop key="*">read</prop>
			</props>
		</property>
		<property name="dataSourceKey">
			<ref bean="dataSourceKey" />
		</property>
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 事务管理拦截器 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="query*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="is*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="load*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="count*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="list*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="check*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="upd*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="process*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="edit*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="reset*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="generate*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="credit*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="debit*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="send*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="*">PROPAGATION_SUPPORTS,-Exception</prop>
			</props>
		</property>
	</bean>

	<!-- 根据Name匹配拦截器(数据源、事务) -->
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<!-- 指定获取数据源的Interceptor -->
				<value>dataSourceInterceptor</value>
				<!-- 事务管理的Interceptor -->
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	
	
	<!-- memcache配置 -->
	<bean id="cacheService" class="com.tasteofdata.land.module.support.cache.impl.CacheServiceMemcacheImpl" 
		init-method="initialize" >
		<property name="coolPoolSize" value="${memcache_coolPoolSize}" />
		<property name="servers" value="${memcache_servers}"/>
 		<property name="weights" value="${memcache_weights}"/>
	</bean>
	
</beans>  